#!/usr/bin/env perl
use v5.10;
use HTTP::Tiny;
use File::Spec;
use Getopt::Long;
use File::Basename;
use Data::Dump qw{ dump };

my $VERSION = $ENV{TOMCAT_VERSION};
my $HOME    = $ENV{HOME} // "$ENV{HOMEDRIVE}$ENV{HOMEPATH}";
my $ROOT    = path($HOME => '.tomcat-ctl');
my $INSTALL = path($HOME => 'local');
my @MIRRORS = qw{
    http://mirrors.gigenet.com/apache/tomcat
    http://apache.tradebit.com/pub/tomcat
};

mkdir $ROOT unless -e $ROOT;

GetOptions(
    'version=s'     => \$VERSION,
    'list'          => sub { exit list($VERSION) }, # list versions
    'help'          => \&help,
    'shutdown|down' => sub { exit ctl(shutdown => $VERSION) },
    'startup|up'    => sub { exit ctl(startup  => $VERSION) },
    'restart|re'    => sub {      ctl(shutdown => $VERSION);
                             exit ctl(startup  => $VERSION) },
    'ping'          => sub { exit ping("http://localhost:8080"); },
    'install'       => sub { exit install($VERSION) }
);

error(\&help) unless @ARGV;

#
# Functions

sub path { File::Spec->join(@_) }

sub error {
    my ($code, @msg) = @_;

    say STDERR @msg if @msg;
    
    if ( $code && ref $code eq 'CODE' ) {
        $code->(@msg);
    }

    exit 1;
}

sub parse_version {
    split /\./ => $_[0];
}

sub extract {
    my ($f, $dir) = @_;
    say "Extracting...";
    my $dir = path($dir => basename($f, '.zip'));
    system "$HOME/bin/7za e -y -o\"$dir\" $f";
    say "ok";
    return 0;
}

#
# Commands
sub ctl {
    my ($cmd, $version) = @_;

    my $ext = $^O =~ /win32/i ? '.bat' : '.sh';
    my $root = path($HOME => local => "apache-tomcat-$version");
    my $bin  = path($root => bin => "${cmd}${ext}");

    $ENV{CATALINA_HOME} = $root; # for windows scripts

    error(\&help => "must specify version") unless $version;

    if ( -e $bin ) {
        say "$cmd: Tomcat $version...";
        say "running '$bin'";
        system $bin;
        say "DONE.";
        return 0;
    }
    else {
        say STDERR "'$bin' doesn't exist";
        return 1;
    }
}

sub deploy {
    my ($war) = @_;
    say $war;
    return 0;
}

sub list {
    my ($version) = @_;
    say "Installed Tomcat Versions:";
    say for map { $version && /$version/ ? "$_ * default " : $_ }
        map { /(\d\.\d(?:\.\d\d)?)/g; $1 }
        glob "$INSTALL/apache-tomcat-*";

    return 0;
}

sub ping {
    my ($url) = @_;
    my $res = HTTP::Tiny->new(timeout => 10)->get($url);
    if ( $res->{success} ) {
        say "An HTTP server is up at $url";
        return 0;
    }
    else {
        say "Tomcat is not up.";
        return 1;
    }
}

sub install {
    my ($version) = @_;
    my @v         = parse_version($version);
    my $major     = $v[0];

    my @urls = map {
        "$_/tomcat-$major/v$version/bin/apache-tomcat-$version.zip";
    } @MIRRORS;

    my $install = path($INSTALL => "apache-tomcat-$version");
    if ( -e $install ) {
        say "Tomcat version $version is already installed at $install";
        return 0
    }
    else {
        my $work = path($ROOT => 'work');
        mkdir $work unless -e $work;

        say "Downloading...";

        my $t = HTTP::Tiny->new;
        for my $url (@urls) {
            my $f = path($work => basename $url);

            if ( -e $f ) { return extract($f => $INSTALL) }
            else {
                my $res = $t->get($url);
                if ( $res->{success} ) {
                    open my $fh, '>', $f or die "can't write to $f";
                    binmode $fh;
                    print $fh $res->{content};
                    say "ok - downloaded to $f";
                }

                return extract($f => $INSTALL) if -e $f;
            }
        }
    }

    return 1;
}

sub help {
    say <<HELP;
Usage: $0 [OPTIONS]

  Options:
     --version, -v VERSION
        Specify a version to start
     
     --list, -l
        List installed versions

     --help, -h

     --startup, -up
        Startup tomcat server

     --shutdown, -down
        Shutdown tomcat server

     --restart, -re
        Restart tomcat server

  returns 0 on success and 1 on failure
HELP

    exit 0;
}
