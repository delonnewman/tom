#!/usr/bin/env perl
use v5.10;
use strict;
use warnings;
use HTTP::Tiny;
use File::Spec;
use Getopt::Long;
use File::Basename;
use Data::Dump qw{ dump };

my $VERSION = $ENV{TOMCAT_VERSION};
my $HOME    = $ENV{HOME} // "$ENV{HOMEDRIVE}$ENV{HOMEPATH}";
my $ROOT    = path($HOME => '.tomcat-ctl');
my $INSTALL = path($HOME => 'local');
my @MIRRORS = qw{
    http://mirrors.gigenet.com/apache/tomcat
    http://apache.tradebit.com/pub/tomcat
};

# ping defaults
my $HOST    = 'localhost';
my $PORT    = '8080';
my $TIMEOUT = 1;

mkdir $ROOT unless -e $ROOT;

GetOptions(
    'version=s' => \$VERSION,
    'host=s'    => \$HOST,
    'port=s'    => \$PORT,
    'timeout=i' => \$TIMEOUT
);

commands(
    help    => \&help,
    install => sub { exit install($VERSION) },
    list    => sub { exit list($VERSION) },
    ping    => sub { exit ping($HOST => $PORT, $TIMEOUT) },
    up      => sub { exit ctl(startup  => $VERSION) },
    down    => sub { exit ctl(shutdown => $VERSION) },
    restart => sub {      ctl(shutdown => $VERSION);
                     exit ctl(startup  => $VERSION) }
);


error(\&help) unless @ARGV;

#
# Functions

sub path { File::Spec->join(@_) }

sub error {
    my ($code, @msg) = @_;

    say STDERR @msg if @msg;
    
    if ( $code && ref $code eq 'CODE' ) {
        $code->(@msg);
    }

    exit 1;
}

sub commands {
    my %cmds = @_;
    my $cmd = shift @ARGV;
    if ( $cmds{$cmd} ) { $cmds{$cmd}->() }
    else               { error(\&help => "'$cmd' is an invalid command") }
}

sub parse_version {
    split /\./ => $_[0];
}

sub extract {
    my ($f, $dir) = @_;
    say "Extracting...";
    system "$HOME/bin/7za x -y -o\"$dir\" $f";
    say "ok";
    return 0;
}

sub plural {
    my ($n, $str) = @_;
    if ( $n == 1 ) { "$n $str" }
    else {
        if ( $str =~ /(s|z)$/i ) { "$n ${str}es" }
        else                     { "$n ${str}s"  }
    }
}

#
# Commands
sub ctl {
    my ($cmd, $version) = @_;

    my $ext = $^O =~ /win32/i ? '.bat' : '.sh';
    my $root = path($HOME => local => "apache-tomcat-$version");
    my $bin  = path($root => bin => "${cmd}${ext}");

    $ENV{CATALINA_HOME} = $root; # for windows scripts

    error(\&help => "must specify version") unless $version;

    if ( -e $bin ) {
        say "$cmd: Tomcat $version...";
        say "running '$bin'";
        system $bin;
        say "DONE.";
        return 0;
    }
    else {
        say STDERR "'$bin' doesn't exist";
        return 1;
    }
}

sub list {
    my ($version) = @_;
    say "Installed Tomcat Versions:";
    say for map { $version && /$version/ ? "$_ * default " : $_ }
        map { /(\d\.\d(?:\.\d\d)?)/g; $1 }
        glob "$INSTALL/apache-tomcat-*";

    return 0;
}

sub ping {
    my ($host, $port, $time) = @_;
    my $url = "http://$host:$port";
    my $res = HTTP::Tiny->new(timeout => $time)->get($url);
    if ( $res->{success} ) {
        say "An HTTP server is up at $url";
        return 0;
    }
    else {
        say "Timed out after ", plural($time => "second"), " when testing $url.";
        return 1;
    }
}

sub install {
    my ($version) = @_;
    my @v         = parse_version($version);
    my $major     = $v[0];

    my @urls = map {
        "$_/tomcat-$major/v$version/bin/apache-tomcat-$version.zip";
    } @MIRRORS;

    my $install = path($INSTALL => "apache-tomcat-$version");
    if ( -e $install ) {
        say "Tomcat version $version is already installed at $install";
        return 0
    }
    else {
        my $work = path($ROOT => 'work');
        mkdir $work unless -e $work;

        say "Downloading...";

        my $t = HTTP::Tiny->new;
        for my $url (@urls) {
            my $f = path($work => basename $url);

            if ( -e $f ) { return extract($f => $INSTALL) }
            else {
                my $res = $t->get($url);
                if ( $res->{success} ) {
                    open my $fh, '>', $f or die "can't write to $f";
                    binmode $fh;
                    print $fh $res->{content};
                    say "ok - downloaded to $f";
                }

                return extract($f => $INSTALL) if -e $f;
            }
        }
    }

    return 1;
}

sub help {
    say <<HELP;
Usage: $0 [COMMAND] [OPTIONS]

  Commands:
        help - display this message

     install - install a version of tomcat

        list - List installed versions

        ping - test if tomcat is up

          up - Startup tomcat server

        down - Shutdown tomcat server

     restart - Restart tomcat server

  Options:
     --version, -v VERSION
        Specify a version for up, down, restart
        and install

  Ping Options:
     --port, -p PORT
        Specify an HTTP port (8080 by default)

     --host, -h HOST
        Specify a network host (localhost by default)

     --timeout, -t TIMEOUT
        Specify timeout in seconds (1 second by default)

  returns 0 on success and 1 on failure
HELP

    exit 0;
}

__END__

=head1 NAME

    tomcat-ctl - Control tomcat from the command line with simplicity

=head1 SYNOPSIS

    > tomcat-ctl install -v 5.5.35
    > tomcat-ctl list
    > tomcat-ctl up -v 5.5.35
    > tomcat-ctl down
    > tomcat-ctl restart
    > tomcat-ctl ping

=head1 AUTHOR

    Delon Newman <delon.newman@gmail.com>

=cut
