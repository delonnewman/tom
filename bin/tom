#!/usr/bin/env perl
use v5.10;
use strict;
use warnings;
use HTTP::Tiny;
use File::Spec;
use Getopt::Long;
use File::Basename;
use Data::Dump qw{ dump };

my $HOME    = $ENV{HOME} // "$ENV{HOMEDRIVE}$ENV{HOMEPATH}";
my $ROOT    = do {
    my $r = path($HOME => '.tom');
    mkdir $r unless -e $r;
    $r;
};
my $INSTALL = path($HOME => '.local');
my $VFILE   = path($ROOT => 'version');
my $VERSION = $ARGV[1] // do {
    write_to($VFILE => '') unless -e $VFILE;
    slurp($VFILE);
};
my @MIRRORS = qw{
    http://mirrors.gigenet.com/apache/tomcat
    http://apache.tradebit.com/pub/tomcat
};

# ping defaults
my $HOST    = 'localhost';
my $PORT    = '8080';
my $TIMEOUT = 1;


GetOptions(
    'host=s'    => \$HOST,
    'port=s'    => \$PORT,
    'timeout=i' => \$TIMEOUT
);

commands(
    help      => \&help,
    install   => sub { exit install($VERSION) },
    uninstall => sub { exit uninstall($VERSION) },
    list      => sub { exit list($VERSION) },
    ping      => sub { exit ping($HOST => $PORT, $TIMEOUT) },
    up        => sub { exit ctl(startup  => $VERSION) },
    down      => sub { exit ctl(shutdown => $VERSION) },
    version   => sub { exit default_version($VERSION) },
    restart   => sub { exit restart($VERSION) }
);

error(\&help) unless @ARGV;

#
# Functions
#

sub path { File::Spec->join(@_) }

sub error {
    my ($code, @msg) = @_;

    say STDERR @msg if @msg;
    
    if ( $code && ref $code eq 'CODE' ) {
        $code->(@msg);
    }

    exit 1;
}

sub commands {
    my %cmds = @_;
    my $cmd  = shift @ARGV;

    if ( $cmd && $cmds{$cmd} ) { $cmds{$cmd}->() }
    else {
        $cmd = '' unless defined $cmd;
        if ( $cmd ) {
            error(\&help => "'$cmd' is an invalid command");
        }
        else {
            error(\&help);
        }
    }
}

sub parse_version {
    split /\./ => $_[0];
}

sub get_versions {
    map { /(\d\.\d(?:\.\d\d)?)/g; $1 }
    glob "$INSTALL/apache-tomcat-*";
}

sub slurp {
    my ($file) = @_;
    open my $fh, '<', $file or die "can't read $file";
    local $/='';
    <$fh>;
}

sub write_to {
    my ($file, $content) = @_;
    open my $fh, '>', $file or die "can't write to $file";
    print $fh $content;
    $content;
}

sub extract {
    my ($f, $dir) = @_;
    say "Extracting...";
    if ( $^O =~ /win32/i ) {
        system "./7zip/7za x -y -o\"$dir\" $f";
        say "ok";
    }
    else {
        chdir $dir;
        system "tar zxvf $f";
        say "ok"
    }
    return 0;
}

sub plural {
    my ($n, $str) = @_;
    if ( $n == 1 ) { "$n $str" }
    else {
        if ( $str =~ /[sz]$/i ) { "$n ${str}es" }
        else                    { "$n ${str}s"  }
    }
}

#
# Commands
#

sub ctl {
    my ($cmd, $version) = @_;
    $version // error(\&list, "Must specify version or set a default version");

    if ( $cmd eq 'shutdown' && ping($HOST => $PORT, $TIMEOUT) == 1 ) {
        say "Tomcat doesn't appear to be running.";
        return 0;
    }

    my $ext = $^O =~ /win32/i ? '.bat' : '.sh';
    my $root = path($INSTALL => "apache-tomcat-$version");
    my $bin  = path($root => bin => "${cmd}${ext}");

    $ENV{CATALINA_HOME} = $root; # for windows scripts

    error(\&help => "must specify version") unless $version;

    if ( -e $bin ) {
        say "$cmd: Tomcat $version...";
        say "running '$bin'";
        system $bin;
        say "DONE.";
        return 0;
    }
    else {
        say STDERR "'$bin' doesn't exist";
        return 1;
    }
}

sub restart {
    my ($version) = @_;

    if ( ping($HOST => $PORT, $TIMEOUT) == 1 ) { ctl(startup => $VERSION) }
    else {
        ctl(shutdown => $VERSION);
        ctl(startup  => $VERSION);
    }
}

sub list {
    my ($version) = @_;
    my @versions =
        map { $version && /$version/ ? "$_ * default " : $_ }
        map { /(\d\.\d(?:\.\d\d)?)/g; $1 }
        glob "$INSTALL/apache-tomcat-*";

    if ( @versions ) {
        say "Installed Tomcat Versions:";
        say for @versions;
    }
    else {
        say "There doesn't appear to be any installed versions of Tomcat.\n",
            "Try using the 'install' command.";
        return 1;
    }

    return 0;
}

sub ping {
    my ($host, $port, $time) = @_;
    my $url = "http://$host:$port";
    my $res = HTTP::Tiny->new(timeout => $time)->get($url);
    if ( $res->{success} ) {
        say "An HTTP server is up at $url";
        return 0;
    }
    else {
        say "Timed out after ", plural($time => "second"), " when testing $url.";
        return 1;
    }
}

sub default_version {
    my ($version) = @_;

    my @versions = grep { /^$version/ } get_versions;
    if ( @versions == 1 ) {
        write_to $VFILE => $versions[0];
        say "Default version set to $versions[0]";
    }
    elsif ( @versions < 1 ) {
        say "Version $version is not installed, use the install command to install it";
        return 1;
    }
    else {
        say "Which version?";
        say for @versions;
    }

    return 0;
}

sub available {
    for my $url (@MIRRORS) {

    }
}

sub uninstall {
    my ($version) = @_;

    error(\&list => 'A version must be specified') unless $version;
    
    my $install = path($INSTALL => "apache-tomcat-$version");
    if ( -e $install ) {
        if ( $^O =~ /win32/i ) { system "cmd.exe /K \"rmdir /S /Q $install && exit\"" }
        else {
            unlink $install or error(undef, $!);
        }

        my $v = slurp($VFILE);
        if ( $v eq $version ) {
            if ( my @vs = get_versions() ) {
                write_to $VFILE => $vs[0];
            }
            else {
                write_to $VFILE => '';
            }
        }

        say "Tomcat $version has been removed";
        return 0;
    }
    else {
        error(\&list => "Tomcat $version does not apear to be installed");
    }
}

sub install {
    my ($version) = @_;

    error(\&help => 'A version must be specified') unless $version;

    my @v         = parse_version($version);
    my $major     = $v[0];

    my @urls = map {
        my $path = "$_/tomcat-$major/v$version/bin";
        if ( $^O =~ /win32/i ) { "$path/apache-tomcat-$version.zip" }
        else                   { "$path/apache-tomcat-$version.tar.gz" }
    } @MIRRORS;

    my $install = path($INSTALL => "apache-tomcat-$version");
    if ( -e $install ) {
        say "Tomcat version $version is already installed at $install";
        return 0;
    }
    else {
        my $work = path($ROOT => 'work');
        mkdir $work unless -e $work;

        say "Downloading...";

        my $t = HTTP::Tiny->new;
        for my $url (@urls) {
            my $f = path($work => basename $url);

            say $f;
            if ( -e $f ) {
                my $r = extract($f => $INSTALL);
                say "Installed Tomcat version $version.";
                return $r;
            }
            else {
                my $res = $t->get($url);
                if ( $res->{success} ) {
                    open my $fh, '>', $f or die "can't write to $f";
                    binmode $fh;
                    print $fh $res->{content};
                    say "ok - downloaded to $f";
                }

                if ( -e $f ) {
                    my $r = extract($f => $INSTALL);
                    say "Installed Tomcat version $version.";
                    return $r;
                }
            }
        }

        say "Can't find Tomcat version $version.";
        return 1;
    }
}

sub help {
    say <<HELP;
Usage: $0 [COMMAND] [OPTIONS]

  Commands:
        help - Display this message

     install - Install a version of Tomcat

   uninstall - Uninstall a version of Tomcat

        list - List installed versions

     version - Set default version

        ping - Test if Tomcat is up

          up - Startup Tomcat server

        down - Shutdown Tomcat server

     restart - Restart Tomcat server

  Options:
     --port, -p PORT
        Specify an HTTP port (8080 by default)

     --host, -h HOST
        Specify a network host (localhost by default)

     --timeout, -t TIMEOUT
        Specify timeout in seconds (1 second by default)

  returns 0 on success and 1 on failure
HELP

    exit 0;
}

__END__

=head1 NAME

    tom - Control tomcat from the command line with simplicity

=head1 SYNOPSIS

    > tom install 5.5.35
    > tom list
    > tom up 5.5.35
    > tom down
    > tom restart
    > tom ping
    > tom version 6.0.35
    > tom uninstall 5.5.35

=head1 REQUIREMENTS

=head2 General

    perl 5.10 or greater
    HTTP::Tiny

=head2 Windows

    7za (the command line version of 7zip) installed in C:\Users\[USERNAME]\bin
    for install command

=head2 Unix

    GNU tar (on PATH) for install command

=head1 AUTHOR

    Delon Newman <delon.newman@gmail.com>

=cut
