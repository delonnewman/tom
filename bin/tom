#!/usr/bin/env perl
use v5.10;
use strict;
use warnings;
use HTTP::Tiny;
use File::Spec;
use Getopt::Long;
use File::Basename;
use Data::Dump qw{ dump };
use Mojo::DOM;

=pod

=head1 NAME

    tom - Control tomcat from the command line with simplicity

=head1 SYNOPSIS

    > tom available
    > tom install 5.5.35
    > tom list
    > tom up 5.5.35
    > tom down
    > tom restart
    > tom ping
    > tom version 6.0.35
    > tom uninstall 5.5.35

=cut

my $HOME    = $ENV{HOME} // "$ENV{HOMEDRIVE}$ENV{HOMEPATH}";
my $ROOT    = do {
    my $r = path($HOME => '.tom');
    mkdir $r unless -e $r;
    $r;
};

my $INSTALL = path($HOME => '.local');
my $VFILE   = path($ROOT => 'version');
my @MIRRORS = map { chomp; "$_/tomcat" } <DATA>;

# ping defaults
my $HOST    = 'localhost';
my $PORT    = '8080';
my $TIMEOUT = 2;

# install options
my $ADMIN   = 0;

GetOptions(
    'host=s'    => \$HOST,
    'port=s'    => \$PORT,
    'timeout=i' => \$TIMEOUT,
    'admin'     => \$ADMIN
);

# Grab second arg after parsing flags
my $VERSION = $ARGV[1] // do {
    write_to($VFILE => '') unless -e $VFILE;
    slurp($VFILE);
};

commands(
    help      => \&help,
    install   => sub { exit install($VERSION) },
    uninstall => sub { exit uninstall($VERSION) },
    list      => sub { exit list($VERSION) },
    available => sub { exit available($VERSION) },
    ping      => sub { exit ping($HOST => $PORT, $TIMEOUT) },
    up        => sub { exit ctl(startup  => $VERSION) },
    down      => sub { exit ctl(shutdown => $VERSION) },
    version   => sub { exit default_version($VERSION) },
    restart   => sub { exit restart($VERSION) }
);

error(\&help) unless @ARGV;


=pod

=head1 COMMANDS

=head2 up

    tom up [VERSION]

Starts up the version of tomcat specified or the default version if
the version is omitted.

=head2 down

    tom down

Shutsdown the currently running tomcat instance

=cut

sub ctl {
    my ($cmd, $version) = @_;
    $version // error(\&list, "Must specify version or set a default version");

    if ( $cmd eq 'shutdown' && ping($HOST => $PORT, $TIMEOUT) == 1 ) {
        say "Tomcat doesn't appear to be running.";
        return 0;
    }

    if ( $cmd eq 'startup' && ping($HOST => $PORT, $TIMEOUT) == 0 ) {
        say "Tomcat is already up.";
        return 0;
    }

    select_version $version => sub {
        my ($v) = @_;
        my $ext = $^O =~ /win32/i ? '.bat' : '.sh';
        my $root = path($INSTALL => "apache-tomcat-$v");
        my $bin  = path($root => bin => "${cmd}${ext}");
    
        $ENV{CATALINA_HOME} = $root; # for windows scripts
    
        error(\&help => "must specify version") unless $v;
    
        if ( -e $bin ) {
            say "$cmd: Tomcat $v...";
            say "running '$bin'";
            system $bin;
            say "DONE.";
            return 0;
        }
        else {
            say STDERR "'$bin' doesn't exist";
            return 1;
        }
    };
}

=pod

=head2 restart

    tom restart [VERSION] [OPTIONS]

Restarts a currently running instance of tomcat if one is running otherwise
it just starts a new instance.  Can specify the host, port and timeout (in
seconds) for testing if a tomcat instance is currently running.

=cut

sub restart {
    my ($version) = @_;
    ctl(shutdown => $VERSION);
    ctl(startup  => $VERSION);
}

=pod

=head2 list

    tom list

List all installed versions of Tomcat

=cut

sub list {
    my ($version) = @_;
    my @versions =
        map { $version && /$version/ ? "$_ * default " : $_ }
        get_versions();

    if ( @versions ) {
        say "Installed Tomcat versions:";
        say for @versions;
    }
    else {
        say "There doesn't appear to be any installed versions of Tomcat.\n",
            "Try using the 'install' command.";
        return 1;
    }

    return 0;
}

=pod

=head2 ping

    tom ping [OPTIONS]

Test if a HTTP server is running at a given host and port combination,
can also specify a timeout in seconds.  The default host is "localhost",
the default port is 8080, and the default timeout is 2 seconds.

=cut

sub ping {
    my ($host, $port, $time) = @_;
    my $url = "http://$host:$port";
    my $res = HTTP::Tiny->new(timeout => $time)->get($url);
    if ( $res->{success} ) {
        say "An HTTP server is up at $url";
        return 0;
    }
    else {
        say "Timed out after ", plural($time => "second"), " when testing $url.";
        return 1;
    }
}

=pod

=head1 version

    tom version VERSION

Set a default version

=cut

sub default_version {
    my ($version) = @_;

    select_version $version => sub {
        my ($v) = @_;
        write_to($VFILE => $v);
        say "Default version set to $v";
        return 0;
    };
}

=pod

=head2 available

    tom available

List all versions of Tomcat that are available for install

=cut

sub available {
    my ($version) = @_;

    my @installed = get_versions();

    say "Tomcat versions available for install:";
    for my $v (get_available()) {
        if ( grep { /$v/ } @installed ) {
            say "$v - installed";
        }
        else {
            say $v;
        }
    }

    return 0;
}

=pod

=head2 uninstall

    tom uninstall VERSION

Uninstalls a version of Tomcat

=cut

sub uninstall {
    my ($pattern) = @_;

    error(\&list => 'A version must be specified') unless $pattern;
    
    select_version $pattern => sub {
        my ($version) = @_;
        my $install = path($INSTALL => "apache-tomcat-$version");
        if ( -e $install ) {
            if ( $^O =~ /win32/i ) { system "cmd.exe /K \"rmdir /S /Q $install && exit\"" }
            else {
                unlink $install or error(undef, $!);
            }
    
            my $v = slurp($VFILE);
            if ( $v eq $version ) {
                if ( my @vs = get_versions() ) {
                    write_to($VFILE => $vs[0]);
                }
                else {
                    write_to($VFILE => '');
                }
            }
    
            say "Tomcat $version has been removed";
            return 0;
        }
        else {
            error(\&list => "Tomcat $version does not apear to be installed");
        }
    };
}

=pod

=head2 install

    tom install VERSION

Installs a version of Tomcat

=cut

sub install {
    my ($pattern) = @_;

    error(\&help => 'A version must be specified') unless $pattern;

    select_available $pattern => sub {
        my ($version) = @_;
    
        my $install = path($INSTALL => "apache-tomcat-$version");
        if ( -e $install ) {
            say "Tomcat version $version is already installed at $install";
            if ( !$ADMIN || -e path($install => 'server' => 'webapps' => 'admin') ) {
                return 0;
            }
            else {
                fetch_install($version => sub {
                    mirrormap($version => "apache-tomcat-$version-admin");
                });
            }
        }
        else {
            my $r = fetch_install($version => sub {
                mirrormap($version => "apache-tomcat-$version");
            });

            if ( $ADMIN ) {
                fetch_install($version => sub {
                    mirrormap($version => "apache-tomcat-$version-admin");
                });
            }
            else {
                return $r;
            }
        }
    };
}

=pod

=head2 help

    tom help

Displays a help message

=cut

sub help {
    say <<HELP;
Usage: $0 [COMMAND] [OPTIONS]

  Commands:
        help - Display this message

     install - Install a version of Tomcat

   uninstall - Uninstall a version of Tomcat

        list - List installed versions

   available - List versions available for install

     version - Set default version

        ping - Test if Tomcat is up

          up - Startup Tomcat server

        down - Shutdown Tomcat server

     restart - Restart Tomcat server

  Options:
     --port, -p PORT
        Specify an HTTP port (8080 by default)

     --host, -h HOST
        Specify a network host (localhost by default)

     --timeout, -t TIMEOUT
        Specify timeout in seconds (2 seconds by default)

  returns 0 on success and 1 on failure
HELP

    exit 0;
}

#
# Utilities
#

sub path { File::Spec->join(@_) }

sub error {
    my ($code, @msg) = @_;

    say STDERR @msg if @msg;
    
    if ( $code && ref $code eq 'CODE' ) {
        $code->(@msg);
    }

    exit 1;
}

sub commands {
    my %cmds = @_;
    my $cmd  = shift @ARGV;

    if ( $cmd && $cmds{$cmd} ) { $cmds{$cmd}->() }
    else {
        $cmd = '' unless defined $cmd;
        if ( $cmd ) {
            error(\&help => "'$cmd' is an invalid command");
        }
        else {
            error(\&help);
        }
    }
}

sub parse_version {
    split /\./ => $_[0];
}

sub get_versions {
    map { /(\d\.\d(?:\.\d\d)?)/g; $1 }
    glob "$INSTALL/apache-tomcat-*";
}

sub select_version($$) {
    my ($version, $fn) = @_;

    my @versions = grep { /^$version/ } get_versions;
    if ( @versions == 1 ) {
        return $fn->($versions[0]);
    }
    elsif ( @versions < 1 ) {
        say "Version $version is not installed, use the install command to install it";
        return 1;
    }
    else {
        say "Which version?";
        say for @versions;
        return 1;
    }

    undef;
}

sub slurp {
    my ($file) = @_;
    open my $fh, '<', $file or die "can't read $file";
    local $/='';
    <$fh>;
}

sub write_to {
    my ($file, $content) = @_;
    open my $fh, '>', $file or die "can't write to $file";
    print $fh $content;
    $content;
}

sub extract {
    my ($f, $dir) = @_;
    say "Extracting...";
    if ( $^O =~ /win32/i ) {
        my $d = dirname __FILE__;
        my $z = "$d\\7zip\\7za.exe";
        if ( -e $z ) {
            system "\"$z\" x -y -o\"$dir\" $f";
            say "ok";
        }
        else {
            say "Can't find 7zip at '$z'";
            return 1;
        }
    }
    else {
        chdir $dir;
        system "tar zxvf $f";
        say "ok"
    }
    return 0;
}

sub plural {
    my ($n, $str) = @_;
    if ( $n == 1 ) { "$n $str" }
    else {
        if ( $str =~ /[sz]$/i ) { "$n ${str}es" }
        else                    { "$n ${str}s"  }
    }
}

{
    my $t;
    sub fetch($$) {
        my ($url, $fn) = @_;
        $t //= HTTP::Tiny->new;
        my $res = HTTP::Tiny->new->get($url);
        if ( !$res->{success} ) { return 1 }
        else {
            $fn->(Mojo::DOM->new($res->{content}), $res);
        }
    }
}

sub first(&@) {
    my ($fn, @list) = @_;
    for my $x (@list) {
        return $x if !!$fn->($x);
    }
    return undef;
}

# Yes, for a monkey!!
sub Mojo::Collection::to_a {
    my ($self) = @_;
    @$self;
}

sub get_available {
    my $t   = HTTP::Tiny->new;
    my $url = first { $t->get(@_)->{success} } @MIRRORS;
    if ( !$url ) { error(undef, "Couldn't reach mirrors") }
    else {
        fetch($url => sub {
            my ($dom) = @_;
            $dom->find('a')
                ->pluck('text')
                ->grep(qr/tomcat-\d/)
                ->map(sub {
                    my ($l) = @_;
                    fetch "$url/$l" => sub {
                        my ($dom) = @_;
                        $dom->find('a')
                            ->pluck('text')
                            ->grep(qr/v\d.\d.\d\d/);
                    };
                })->map(sub{ my ($x) = @_; @$x if ref $x });
        })->map(sub{ my ($x) = @_; $x =~ s/v//; $x =~ s/\///; $x })->to_a;
    }
}

sub select_available($$) {
    my ($version, $fn) = @_;

    my @versions = grep { /^$version/ } get_available;
    if ( @versions == 1 ) {
        return $fn->($versions[0]);
    }
    elsif ( @versions < 1 ) {
        say "Version $version is not installed, use the install command to install it";
        return 1;
    }
    else {
        say "Which version?";
        say for @versions;
        return 1;
    }

    undef;
}

sub fetch_install($$) {
    my ($version, $fn) = @_;

    my @urls = $fn->($version);

    my $work = path($ROOT => 'work');
    mkdir $work unless -e $work;

    say "Downloading...";

    my $t = HTTP::Tiny->new;
    for my $url (@urls) {
        my $f = path($work => basename $url);

        say $f;
        if ( -e $f ) {
            my $r = extract($f => $INSTALL);
            say "Installed Tomcat version $version.";
            return $r;
        }
        else {
            my $res = $t->get($url);
            if ( $res->{success} ) {
                open my $fh, '>', $f or die "can't write to $f";
                binmode $fh;
                print $fh $res->{content};
                say "ok - downloaded to $f";
            }

            if ( -e $f ) {
                my $r = extract($f => $INSTALL);
                say "Installed Tomcat version $version.";
                return $r;
            }
        }
    }

    say "Can't find Tomcat version $version.";
    return 1;
}

sub mirrormap {
    my ($version, $pat) = @_;
    die "A pattern is required for matching remote files" unless $pat;
    
    my @v     = parse_version($version);
    my $major = $v[0];

    map {
        my $path = "$_/tomcat-$major/v$version/bin";
        if ( $^O =~ /win32/i ) { "$path/$pat.zip" }
        else                   { "$path/$pat.tar.gz" }
    } @MIRRORS;
}

=pod

=head1 REQUIREMENTS

=head2 General

    perl 5.10 or greater
    HTTP::Tiny
    Mojo::DOM 3.38

=head2 Windows

    7za (the command line version of 7zip) installed in C:\Users\[USERNAME]\bin
    for install command

=head2 Unix

    GNU tar (on PATH) for install command

=head1 AUTHOR

    Delon Newman <delon.newman@gmail.com>

=cut

1;

__DATA__
http://mirrors.gigenet.com/apache
http://apache.tradebit.com/pub
http://apache.mirrors.pair.com
http://mirror.cc.columbia.edu/pub/software/apache
http://apache.osuosl.org
http://mirrors.sonic.net/apache
